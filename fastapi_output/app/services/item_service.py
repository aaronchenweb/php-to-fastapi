"""
Business logic services.
Generated by PHP to FastAPI converter.
"""

from typing import List, Optional
from sqlalchemy.orm import Session

from app.models.models import User, Item
from app.schemas.item import ItemCreate, ItemUpdate


class ItemService:
    """Item service for business logic."""
    
    def __init__(self, db: Session):
        self.db = db
    
    def get_items(self, skip: int = 0, limit: int = 100) -> List[Item]:
        """Get all items."""
        return self.db.query(Item).offset(skip).limit(limit).all()
    
    def get_item(self, item_id: int) -> Optional[Item]:
        """Get item by ID."""
        return self.db.query(Item).filter(Item.id == item_id).first()
    
    def create_item(self, item: ItemCreate, owner_id: int) -> Item:
        """Create new item."""
        db_item = Item(**item.dict(), owner_id=owner_id)
        self.db.add(db_item)
        self.db.commit()
        self.db.refresh(db_item)
        return db_item
    
    def update_item(self, item_id: int, item: ItemUpdate) -> Optional[Item]:
        """Update item."""
        db_item = self.get_item(item_id)
        if db_item:
            update_data = item.dict(exclude_unset=True)
            for field, value in update_data.items():
                setattr(db_item, field, value)
            self.db.commit()
            self.db.refresh(db_item)
        return db_item
    
    def delete_item(self, item_id: int) -> bool:
        """Delete item."""
        db_item = self.get_item(item_id)
        if db_item:
            self.db.delete(db_item)
            self.db.commit()
            return True
        return False


class UserService:
    """User service for business logic."""
    
    def __init__(self, db: Session):
        self.db = db
    
    def get_user_by_username(self, username: str) -> Optional[User]:
        """Get user by username."""
        return self.db.query(User).filter(User.username == username).first()
    
    def get_user_by_email(self, email: str) -> Optional[User]:
        """Get user by email."""
        return self.db.query(User).filter(User.email == email).first()
